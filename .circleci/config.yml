version: 2.1

orbs:
  shellcheck: circleci/shellcheck@2.2.2
  aws-cli: circleci/aws-cli@1.3.1

jobs:
####################################
# Network
####################################  
  terraform-network-plan-apply:
    working_directory: /tmp/project
    docker:
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            cd terraform/network
            terraform init -input=false
            terraform plan -out tfapply -var-file environment.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-network-apply:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform-apply
          command: |
            cd terraform/network
            terraform apply -auto-approve tfapply
            terraform output public_subnet_id_for_packer >> ../../packer/subnet_id.txt
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-network-plan-destroy:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd terraform/network
            terraform plan -destroy -out tfdestroy -var-file environment.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-network-destroy:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd terraform/network
            terraform apply -auto-approve tfdestroy

####################################
# EC2
####################################
  terraform-ec2-plan-apply:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform init & plan
          command: |
            cd terraform/ec2
            terraform init -input=false
            terraform plan -out tfapply -var-file environment.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-ec2-apply:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform-apply
          command: |
            cd terraform/ec2
            terraform apply -auto-approve tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-ec2-plan-destroy:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd terraform/ec2
            terraform plan -destroy -out tfdestroy -var-file environment.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-ec2-destroy:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd terraform/ec2
            terraform apply -auto-approve tfdestroy

####################################
# RDS
####################################
  shell-rds-vars:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: rds
      - run:
          command: sh scripts/rds_vars.sh

  terraform-rds-plan-apply:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform init & plan
          command: |
            cd terraform/rds
            terraform init -input=false
            terraform plan -out tfapply -var-file environment.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-rds-apply:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform-apply
          command: |
            cd terraform/rds
            terraform apply -auto-approve tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-rds-plan-destroy:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd terraform/rds
            terraform plan -destroy -out tfdestroy -var-file environment.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-rds-destroy:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd terraform/rds
            terraform apply -auto-approve tfdestroy

####################################
# Packer
####################################
  packer-validate:
    docker:
      - image: hashicorp/packer:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: packer-validate
          command: |
            cd packer
            packer validate packer.json
      - persist_to_workspace:
          root: .
          paths:
            - .

  packer-build:
    docker:
      - image: hashicorp/packer:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: packer-build
          command: |
            cd packer
            subnet_id=`cat subnet_id.txt`
            packer build -var subnet_id=$subnet_id packer.json
      - persist_to_workspace:
          root: .
          paths:
            - .

workflows:
  version: 2
  aws-wordpress-mysql:
    jobs:
      # Complete pipeline
      # - terraform-network-plan-apply
      # - terraform-network-hold-apply:
      #     type: approval
      #     requires:
      #       - terraform-network-plan-apply
      # - terraform-network-apply:
      #     requires:
      #       - terraform-network-hold-apply
      # - packer-validate:
      #     requires:
      #       - terraform-network-apply
      # - packer-hold:
      #     type: approval
      #     requires:
      #       - packer-validate
      # - packer-build:
      #     requires:
      #       - packer-hold
      # - terraform-ec2-plan-apply:
      #     requires:
      #       - packer-build
      # - terraform-ec2-hold-apply:
      #     type: approval
      #     requires:
      #       - terraform-ec2-plan-apply
      # - terraform-ec2-apply:
      #     requires:
      #       - terraform-ec2-hold-apply
      # - terraform-rds-plan-apply:
      #     requires:
      #       - terraform-ec2-apply
      # - terraform-rds-hold-apply:
      #     type: approval
      #     requires:
      #       - terraform-rds-plan-apply
      # - terraform-rds-apply:
      #     requires:
      #       - terraform-rds-hold-apply
      # - terraform-rds-plan-destroy:
      #     requires:
      #       - terraform-rds-apply
      # - terraform-rds-hold-destroy:
      #     type: approval  
      #     requires:
      #       - terraform-rds-plan-destroy
      # - terraform-rds-destroy:
      #     requires:
      #       - terraform-rds-hold-destroy
      # - terraform-ec2-plan-destroy:
      #     requires:
      #       - terraform-rds-destroy
      # - terraform-ec2-hold-destroy:
      #     type: approval  
      #     requires:
      #       - terraform-ec2-plan-destroy
      # - terraform-ec2-destroy:
      #     requires:
      #       - terraform-ec2-hold-destroy
      # - terraform-network-plan-destroy:
      #     requires:
      #       - terraform-ec2-destroy
      # - terraform-network-hold-destroy:
      #     type: approval
      #     requires:
      #       - terraform-network-plan-destroy
      # - terraform-network-destroy:
      #     requires:
      #       - terraform-network-hold-destroy

      # Faster pipeline without Packer build
      - shell-rds-vars
      - terraform-network-plan-apply
      - terraform-network-apply:
          requires:
            - terraform-network-plan-apply
      - terraform-ec2-plan-apply:
          requires:
            - terraform-network-apply
      - terraform-ec2-apply:
          requires:
            - terraform-ec2-plan-apply
      - terraform-rds-plan-apply:
          requires:
            - terraform-ec2-apply
      - terraform-rds-apply:
          requires:
            - terraform-rds-plan-apply
      - terraform-rds-plan-destroy:
          requires:
            - terraform-rds-apply
      - terraform-rds-hold-destroy:
          type: approval  
          requires:
            - terraform-rds-plan-destroy
      - terraform-rds-destroy:
          requires:
            - terraform-rds-hold-destroy
      - terraform-ec2-plan-destroy:
          requires:
            - terraform-rds-destroy
      - terraform-ec2-hold-destroy:
          type: approval  
          requires:
            - terraform-ec2-plan-destroy
      - terraform-ec2-destroy:
          requires:
            - terraform-ec2-hold-destroy
      - terraform-network-plan-destroy:
          requires:
            - terraform-ec2-destroy
      - terraform-network-hold-destroy:
          type: approval
          requires:
            - terraform-network-plan-destroy
      - terraform-network-destroy:
          requires:
            - terraform-network-hold-destroy